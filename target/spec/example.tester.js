require('coffee-script/register');
var fs = require('fs');
var util = require('./lib/tester.util');

var setupTitle = /^suggested(?:[^\n])+?setup/i;
var setupSpecLoc = /(?:#|\/\/) Add Specs/i;
var isExampleTitle = /Examples?$/;

var banner = [
  'Do NOT manually edit this file, these tests were generated by "npm run testExamples".',
  'Changes to this file may cause incorrect behavior and will be lost when tests are rerun.'
];
banner.CoffeeScript = ['###', banner.join('\n'), '###'].join('\n');
banner.JavaScript = ['/*', banner.join('\n'), '*/'].join('\n');

var specs = {},
    scenarios = {},
    files;

// organize pattern specs by code language and file
var organizeByLang = function (file, blocks) {
  if (blocks.length === 0) {
    return;
  }

  // load all the specs for each code block
  blocks.forEach(function (block) {
    // there are 2 types of tests, end-to-end and specs
    if (block.type === 'e2e') {
      // end-to-end scenarios
      if (!scenarios[block.lang]) {
        scenarios[block.lang] = {};
      }
      if (!scenarios[block.lang][file]) {
        scenarios[block.lang][file] = [];
      }
      scenarios[block.lang][file].push(block);
    } else {
        // specs
      if (!specs[block.lang]) {
        specs[block.lang] = {};
      }
      if (!specs[block.lang][file]) {
        specs[block.lang][file] = [];
      }
      specs[block.lang][file].push(block);
    }
  });
};

var isExample = function (block) {
  return block.title.match(isExampleTitle);
};

var isValidSetup = function (block) {
  // TODO: these 2 checks should really be in a rule
  if (!block.title.match(setupTitle)) {
    throw new Error([
      block.title, ' ',
      block.lang,
      '\nExpected the first code block to be the suggested setup'
    ].join(''));
  }
  if (!block.contents.match(setupSpecLoc)) {
    throw new Error([
      block.title, ' ',
      block.lang,
      '\nExpected the suggested setup block to contain "Add Specs"'
    ].join(''));
  }
};

var formatFile = function (list, contents) {
  var blocks = [],
      setup,
      specs,
      indent;

  // get the first block
  setup = list.shift();

  // ignore example sections
  if (isExample(setup)) {
    return;
  }

  isValidSetup(setup);

  list.forEach(function (block) {
    // indentation amount changes by block type
    if (block.type === 'e2e') {
      indent = '\n  ';
    } else {
      indent = '\n    ';
    }
    blocks.push(pattern = block.contents.replace(/\n/g, indent));
  });
  // merge the specs into the setup block
  specs = setup.contents.replace(setupSpecLoc, blocks.join('\n'));

  // add specs to the final list
  contents.push(specs);
};

// merge pattern specs into the setup block
var formatSpecs = function (files, lang) {
  var contents = [],
      file;

  // add file banner
  contents.push(banner[lang]);

  for (file in files) {
    formatFile(files[file], contents);
  }

  return contents.join('\n');
};

var getFileExt = function (lang) {
  switch (lang) {
  case 'CoffeeScript':
    return '.coffee';
  case 'JavaScript':
    return '.js';
  }
};

var getFileName = function (name, lang) {
  return 'example/' + lang.toLowerCase() + '/' + name + getFileExt(lang);
};

// write spec files
var createSpecs = function () {
  var lang, path, contents;
  // there are 2 types of tests
  for (lang in specs) {
    // specs
    path = getFileName('spec', lang);
    contents = formatSpecs(specs[lang], lang);
    fs.writeFileSync(path, contents, 'utf-8', {'flags': 'w+'});    
    console.log('updated: ' + path);
  }
  for (lang in scenarios) {
    // end-to-end scenarios
    path = getFileName('scenario', lang);
    contents = formatSpecs(scenarios[lang], lang);
    fs.writeFileSync(path, contents, 'utf-8', {'flags': 'w+'});    
    console.log('updated: ' + path);
  }
};

// find the pattern files
files = util.findPatterns();

// load the pattern files
util.loadPatterns(files, organizeByLang);

// generate spec files
createSpecs();